Language:
----------
		it is for communication with humans

		hindi,telugu........english


Programming Language:
---------------------
				communication with machine

				James gosling,sun micro system ,oracle
				POP       						OOP
B,BCPL,COBOL,C...					C++,python,java,.net....
													1992,1995 JDK 1.0 ....
																JDK 11 

			
					1)Performance    inheritance,polymorphisam
					2)Security			 abstraction,encapsulation

									oop's /oop'l

												java,python			WORA

									1)Platform Independent 
									2)Garbage Collection-->jdk --->garbage collector  -->c/c++

					java 
			53 keywords --->lower case 
								
			setup--java
							Welcome.java
				

			
					welcomeToJava-camel case
					WelcomeToJava-camel case
	   //all the keywords in java must be in lower case 
		//all the class names in java must be pascal case 
	  // all the method/variable names in java must camel case 
			

//compailation is a process of converting userlang/source/.java to machinelang/byte/.class -->compiler

//				   javac filename.java	  a-97-->
//filename.java---------------------->compiler------>classname.class--->compailation
					java classname	
//classname.class-------------------->JVM------>output




Java/.net


		windows10               linux

		app.class			--->no



JAVA :-

identifiers: 9494348734 -->rk trainer

			age=29
			
		var,class,method,interface....name


		A-Z
		a-z
		0-9
		$ _	

	
variables
---------
				local-->if we declare var inside a method then we call it as local variable 
				global-->if we declare var inside a class and outside the method then  we call it as global variable 
				
			datatype varname=value
					
			class Test
			{
			float salary=23.78f;//global var and can be accessed any where inside class 
			public  static void main(String args[])
			{
					float salary=23.78f;//local var and can be accessed only  with in the method 
					
				}
			}
			
		class Welcome				// PI user understandable lang package 
{
		//all the keywords in java must be in lower case 
		//all the class names in java must be pascal case 
	    // all the method/variable names in java must camel case 

			static int age=23;//global var and can be accessed any where inside class
					float salary=23.45f; //instance 4 bytes 
			public  static void main(String args[])//java.lang  #include-->import
			{
					float salary=23.78f;//local var and can be accessed only  with in the method 
					System.out.println(salary);
					System.out.println(Welcome.age);//accessing static variable using classname 
					Welcome wel=new Welcome();		//memory creation for welcome class instance properties
					System.out.println(wel.salary);//accessing instance variable using objref 
					Welcome wel1=new Welcome();
				}
}

datatypes--->PDT  
				
		8
		byte		1 byte -->  -128 to 127 values 
		short		2 bytes -->	-32768 to 32767
		int		4 bytes -->
		long		8 bytes
	
		float		4 bytes
		double	8 bytes

		boolean	1 bit    true-1,false-0
		char		2 bytes	 char gender='M'; char a='F';
 
								C->english	ASCII-->A-65 ,a-97...
						
								java-	Unicode 18 international languages
flow control,operators

	
				local var
				global var -->instance/non-static,static
			
4 points

	syntax:		A
	-------
				static int marks=90;//global & static variable
						float salary=90.3f;//global & instance variable

	memory:
	------- how much,when,where--->
			static properties(var,method,block) will get memory space only once at the time of class loading into JVM.
			instance properties(var,method,block) will get memory space for every object creation
						class,object
A						Classname objref=new classname();
						
							A obj=new A();
	Access:
	------
			static properties can be accessed by using class name
			
			instance properties can be accessed by using object reference
	when to use:
	------------
			for common  data will go for static 
			for unique data will go for instance


PrintStream class
System.out.println();

Welcome.name.length();

class Welcome
{
		static String name="sleeping";

main()
{

Welcome.name.length();

}
}



class System
{
		static PrintStream out;

main()
{

System.out.println();

}
}

							java
				jse 			jee 			jme


1)standalone/dekstop apps   jse core java,awt,swings
2)web apps						jee servlets,jsp,jsf,ejb,spring...
3)distribtued  apps			jee webservices
4)mobile apps					jme android


IDE
		netbeans,eclipse,myeclipse,vscode,intelji...


Methods:
--------
			
public static void main(String args[])
{


}

accessmodifer static/instance returntype methodname(param1,param2...)//method signature
{
//method body
}

class Caluculator{

public static int addOfTwo(int a,int b)
{
	return a+b;
}
public void subOfTwo(int a,int b)//instance method with no return
{
System.out.println(a-b)
}
public  void mulOfTwo()//default method
{
int a=23;
int b=2
System.out.println(a*b)
}
}



public class DynamicInputEx {

	public static void main(String[] args) {// jvm
		int marks[] = { 234, 123, 234, 33, 54, 55 };// index-->0
		for (int i = 0; i < marks.length; i++) {
			System.out.println(marks[i]);
		}

		float salaries[] = new float[2];// index-4
		salaries[0] = 23456;
		salaries[1] = 256;

		for (int i = 0; i < salaries.length; i++) {
			System.out.println(salaries[i]);
		}
	}

}

Inheritance:
============Code Reusability-->performance

			extends,implements




class A
{
//20





}


class B extends A
{
//25


}

class C extends A



Multiple Inheritance:
=====================
	MI not supported by java @class level

	MI is supported by java @interface level









